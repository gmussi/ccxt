<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import

class deepwaters extends Exchange {

    public function describe() {
        array($this, 'nonce')= 0;
        return $this->deep_extend(parent::describe(), array(
            'id' => 'deepwaters',
            'name' => 'Deepwaters',
            'countries' => array( 'US' ),
            'rateLimit' => 5,
            'certified' => false,
            'version' => 'v1',
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchCanceledOrders' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPositionMode' => false,
                'fetchStatus' => false,
                'fetchTicker' => false,
                'fetchTickers' => false,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => null,
            'urls' => array(
                'test' => array(
                    'public' => 'https://testnet.api.deepwaters.xyz/rest/v1',
                    'private' => 'https://testnet.api.deepwaters.xyz/rest/v1',
                ),
                'api' => array(
                    'public' => 'https://api.deepwaters.xyz/rest/v1',
                    'private' => 'https://api.deepwaters.xyz/rest/v1',
                ),
                'www' => 'https://deepwaters.xyz',
                'referral' => '',
                'doc' => array(
                    'https://rest.docs.api.deepwaters.xyz/',
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.001,
                    'taker' => 0.0015,
                    'feeSide' => 'get',
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'assets' => 1,
                        'pairs' => 1,
                        'pairs/{pair}/orderbook' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'customer' => 1,
                        'customer/api-key-status' => 1,
                        'orders' => 1,
                        'orders/by-venue-order-id/{id}' => 1,
                        'orders/by-customer-object-id/{id}' => 1,
                        'trades' => 1,
                    ),
                    'post' => array(
                        'orders' => 1,
                    ),
                    'delete' => array(
                        'orders' => 1,
                        'orders/by-customer-object-id/{id}' => 1,
                        'orders/by-venue-order-id/{id}' => 1,
                    ),
                ),
                'precisionMode' => DECIMAL_PLACES,
            ),
        ));
    }

    public function fetch_markets() {
        /**
         * fetches $market data from deepwaters
         * @return {[array]} an array of $market data objects
         */
        $response = $this->publicGetPairs ();
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        $markets = $this->safe_value($response, 'result', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            // {
            //     baseAssetRootSymbol => 'AVAX',
            //     quoteAssetRootSymbol => 'USDC',
            //     baseAssetParentSymbol => 'WAVAX.DW',
            //     quoteAssetParentSymbol => 'USDC.DW',
            //     baseAssetID => 'WAVAX.AVALANCHE_FUJI.43113.TESTNET.PROD',
            //     quoteAssetID => 'USDC.AVALANCHE_FUJI.43113.TESTNET.PROD',
            //     name => 'WAVAX.AVALANCHE_FUJI.43113.TESTNET.PROD-USDC.AVALANCHE_FUJI.43113.TESTNET.PROD',
            //     baseAssetIncrementSize => '.01',
            //     $baseAssetIncrementPrecision => '2',
            //     quoteAssetIncrementSize => '.001',
            //     $quoteAssetIncrementPrecision => '3',
            //     createdAtMicros => '1677695274781348',
            //     quotedAtMicros => '1677838210968536',
            //     ask => '16.418',
            //     bid => '16.396'
            // }
            $market = $markets[$i];
            $id = $this->safe_value($market, 'name');
            $lowercaseId = $this->safe_string_lower($market, 'name');
            $base = $this->safe_value($market, 'baseAssetRootSymbol');
            $quote = $this->safe_value($market, 'quoteAssetRootSymbol');
            $symbol = `${$base}/${$quote}`;
            $baseId = $this->safe_value($market, 'baseAssetID');
            $quoteId = $this->safe_value($market, 'quoteAssetID');
            $baseAssetIncrementPrecision = $this->parse_number($this->parse_precision($this->safe_string($market, 'baseAssetIncrementPrecision')));
            $quoteAssetIncrementPrecision = $this->parse_number($this->parse_precision($this->safe_string($market, 'quoteAssetIncrementPrecision')));
            $result[] = array(
                'id' => $id,
                'lowercaseId' => $lowercaseId,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => true,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $baseAssetIncrementPrecision,
                    'price' => $quoteAssetIncrementPrecision,
                    'cost' => null,
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies() {
        /**
         * Fetches all available $currencies an exchange and returns an associative dictionary of $currencies->
         * @return {array} a dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#$currency-structure $currency structure}
         */
        $response = $this->publicGetAssets ();
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        $currencies = $this->safe_value($response, 'result', array());
        $result = array();
        for ($i = 0; $i < count($currencies); $i++) {
            // {
            //     chainID => '5',
            //     chainName => 'GOERLI',
            //     assetAddress => '0x53948de192afe6c531894337799881702115b6b6',
            //     rootSymbol => 'ZRB',
            //     assetID => 'ZRB.GOERLI.5.TESTNET.PROD',
            //     parentSymbol => 'ZRB.DW',
            //     frontEndSymbol => 'ZRB',
            //     $name => 'Zorb',
            //     ticker => 'ZRB',
            //     frontEndName => '',
            //     uiDecimals => '5',
            //     databaseDecimals => '25',
            //     contractDecimals => '18',
            //     createdAtMicros => '1677695274753017'
            // }
            $currency = $currencies[$i];
            $id = $this->safe_string($currency, 'assetID');
            $code = $this->safe_string($currency, 'rootSymbol');
            $name = $this->safe_string($currency, 'name');
            $precision = $this->parse_number($this->parse_precision($this->safe_string($currency, 'uiDecimals')));
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'name' => $name,
                'active' => true,
                'deposit' => true,
                'withdraw' => true,
                'fee' => null,
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => $precision,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $currency,
            );
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {array} $params extra parameters specific to the deepwaters api endpoint
         * @return {array} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrderBook() requires a $symbol argument');
        }
        $this->load_markets(); // this will load only the first time
        $market = $this->market($symbol);
        $request = array(
            'pair' => $market['id'],
        );
        if ($limit !== null) {
            $request['depth'] = $limit;
        }
        $response = $this->publicGetPairsPairOrderbook (array_merge($request, $params));
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        $result = $this->safe_value($response, 'result', array());
        // {
        //     $snapshotAtMicros => '1677844033163585',
        //     bids => array(
        //       array( depth => '0', price => '320.0100', quantity => '4457663.494' ),
        //       array( depth => '1', price => '320.0000', quantity => '103676273.148' ),
        //       array( depth => '2', price => '319.9900', quantity => '1.327' ),
        //       array( depth => '3', price => '319.8700', quantity => '96.225' ),
        //       array( depth => '4', price => '319.6600', quantity => '95.303' ),
        //       array( depth => '5', price => '319.4500', quantity => '103.147' ),
        //       array( depth => '6', price => '319.2300', quantity => '100.198' ),
        //       array( depth => '7', price => '319.0200', quantity => '104.780' ),
        //       array( depth => '8', price => '318.8100', quantity => '102.695' ),
        //       array( depth => '9', price => '318.5900', quantity => '96.233' )
        //     ),
        //     asks => array()
        // }
        $snapshotAtMicros = $this->safe_string($result, 'snapshotAtMicros', '0');
        $timestamp = $this->parse_number(Precise::string_div($snapshotAtMicros, '1000'));
        return $this->parse_order_book($result, $symbol, $timestamp, 'bids', 'asks', 'price', 'quantity');
    }

    public function fetch_balance() {
        /**
         * query for $balance and get the $amount of funds available for trading or funds locked in orders
         * @param {array} params extra parameters specific to the deepwaters api endpoint
         * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#$balance-structure $balance structure~
         */
        $this->load_markets();
        $response = $this->privateGetCustomer ();
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        // {
        //     customerAddress => '0x4db55abc5e7532439501bc6aed40b6281382959a',
        //     nonce => '1',
        //     createdAtMicros => '1677829125843454',
        //     $modifiedAtMicros => '1677829125843553',
        //     lastCustomerObjectID => null,
        //     $balances => array()
        // }
        $result = $this->safe_value($response, 'result', array());
        $balances = $this->safe_value($result, 'balances');
        $modifiedAtMicros = $this->safe_value($result, 'modifiedAtMicros');
        $timestamp = $this->parse_number(Precise::string_div($modifiedAtMicros, '1000', '0'));
        $datetime = $this->iso8601($timestamp);
        $output = array(
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'info' => $result,
            'free' => array(),
            'used' => array(),
            'total' => array(),
        );
        for ($i = 0; $i < count($balances); $i++) {
            // {
            //     'amount' => 'string',
            //     'assetID' => 'string',
            //     'serviceDescription' => 'string',
            //     'serviceName' => 'string'
            // }
            $balance = $balances[$i];
            $currencyId = $this->safe_value($balance, 'assetID');
            $currency = $this->safe_value($this->currencies_by_id, $currencyId);
            if (!$currency) {
                // this is only needed in sandbox mode, if you get airdrops
                continue;
            }
            $currencyCode = $this->safe_value($currency, 'code');
            if (!$output[$currencyCode]) {
                $output[$currencyCode] = array(
                    'used' => '0',
                    'free' => '0',
                );
                $output['used'][$currencyCode] = '0';
                $output['free'][$currencyCode] = '0';
            }
            $amount = $this->safe_value($balance, 'amount');
            $serviceName = $this->safe_value($balance, 'serviceName');
            if ($serviceName === 'accounting.available') {
                $output[$currencyCode]['free'] = $amount;
                $output['free'][$currencyCode] = $amount;
            } elseif ($serviceName === 'fee' || $serviceName === 'swap.engine') {
                $used = Precise::string_add($output[$currencyCode]['used'], $amount);
                $output[$currencyCode]['used'] = $used;
                $output['used'][$currencyCode] = $used;
            }
        }
        $keys = is_array($output['used']) ? array_keys($output['used']) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $key = $keys[$i];
            $total = Precise::string_add($output['used'][$key], $output['free'][$key]);
            $output['total'][$key] = $total;
            $output[$key]['total'] = $total;
        }
        return $this->safe_balance($output);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches a list of all $orders (either open or closed/canceled) made by the user
         * @param {string|null} $symbol unified $market $symbol of the $market $orders were made in
         * @param {int|null} $since the earliest time in ms to fetch $orders for
         * @param {int|null} $limit the maximum number of  orde structures to retrieve
         * @param {array} $params extra parameters specific to the deepwaters api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $this->load_markets();
        $this->load_nonce();
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        if ($since !== null) {
            $since = Precise::string_mul($this->decimal_to_precision($since), '1000');
            $request['created-at-or-after-micros'] = $since;
        }
        if ($limit !== null) {
            $limit = $this->decimal_to_precision($limit);
            $request['limit'] = $limit;
        }
        $response = $this->privateGetOrders (array_merge($request, $params));
        $success = $this->safe_value($response, 'success', false);
        // array(
        //     {
        //       "averagePrice" => "string",
        //       "baseAssetID" => "string",
        //       "createdAtMicros" => 0,
        //       "customerObjectID" => "string",
        //       "durationType" => "GOOD_TILL_CANCEL",
        //       "expiresAtMicros" => 0,
        //       "modifiedAtMicros" => 0,
        //       "originalQuantity" => "string",
        //       "price" => "string",
        //       "quantity" => "string",
        //       "quoteAssetID" => "string",
        //       "side" => "BUY",
        //       "status" => "ACTIVE",
        //       "type" => "LIMIT",
        //       "venueOrderID" => "string",
        //       "volume" => "string"
        //     }
        //   )
        if (!$success) {
            return $this->handle_error($response);
        }
        $result = $this->safe_value($response, 'result', array());
        $orders = $this->safe_value($result, 'orders', array());
        return $this->parse_orders($orders);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $trades made by the user
         * @param {string} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch $trades for
         * @param {int|null} $limit the maximum number of $trades structures to retrieve
         * @param {array} $params extra parameters specific to the deepwaters api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#$trade-structure $trade structures}
         */
        $this->load_markets();
        $request = array(
            // 'pair' => '',
            // 'type' => '',
            // 'created-at-or-after-micros' => '',
            // 'created-before-micros' => '',
            // 'skip' => '',
            // 'limit' => ''
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        if ($since !== null) {
            $since = Precise::string_mul($this->decimal_to_precision($since), '1000');
            $request['created-at-or-after-micros'] = $since;
        }
        if ($limit !== null) {
            $limit = $this->decimal_to_precision($limit);
            $request['limit'] = $limit;
        }
        $response = $this->privateGetTrades (array_merge($request, $params));
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        $result = $this->safe_value($response, 'result', array());
        $trades = $this->safe_value($result, 'trades', array());
        $output = array();
        for ($i = 0; $i < count($trades); $i++) {
            // {
            //     "aggressorCustomerObjectID" => "string",
            //     "aggressorFeesTotalValueInQuoteAsset" => "string",
            //     "aggressorFeesQuoteAssetAmount" => "string",
            //     "aggressorFeesWTRAmount" => "string",
            //     "aggressorRemainingQuantity" => "string",
            //     "aggressorVenueOrderID" => "string",
            //     "baseAssetID" => "string",
            //     "createdAtMicros" => 0,
            //     "makerCustomerObjectID" => "string",
            //     "makerFeesTotalValueInQuoteAsset" => "string",
            //     "makerFeesQuoteAssetAmount" => "string",
            //     "makerFeesWTRAmount" => "string",
            //     "makerRemainingQuantity" => "string",
            //     "makerVenueOrderID" => "string",
            //     "makerWasBuyer" => true,
            //     "price" => "string",
            //     "quantity" => "string",
            //     "quoteAssetID" => "string",
            //     "tradeID" => "string",
            //     "tradeType" => "FILL",
            //     "userWasAggressor" => true,
            //     "userWasMaker" => true
            // }
            $trade = $trades[$i];
            $id = $this->safe_value($trade, 'tradeID');
            $createdAtMicros = $this->safe_value($trade, 'createdAtMicros');
            $timestamp = $this->parse_number(Precise::string_div($createdAtMicros, '1000'));
            $datetime = $this->iso8601($timestamp);
            $baseAssetID = $this->safe_value($trade, 'baseAssetID');
            $quoteAssetID = $this->safe_value($trade, 'quoteAssetID');
            $market = $this->market($baseAssetID . '-' . $quoteAssetID);
            $symbol = $this->safe_value($market, 'symbol');
            $makerWasBuyer = $this->safe_value($market, 'makerWasBuyer');
            $userWasMaker = $this->safe_value($market, 'userWasMaker');
            $maker = $userWasMaker ? 'maker' : 'taker';
            $side = $userWasMaker === $makerWasBuyer ? 'buy' : 'sell';
            $price = $this->safe_number($market, 'price');
            $amount = $this->safe_number($market, 'quantity');
            $cost = Precise::string_mul($this->safe_value($market, 'price'), $this->safe_value($market, 'quantity'));
            $userWasAggressor = $this->safe_value($market, 'userWasAggressor');
            $type = $userWasAggressor ? 'market' : 'limit';
            $output[] = $this->safe_trade(array(
                'info' => $trade,
                'id' => $id,
                'timestamp' => $timestamp,
                'datetime' => $datetime,
                'symbol' => $symbol,
                'order' => null,
                'type' => $type,
                'side' => $side,
                'takerOrMaker' => $maker,
                'price' => $price,
                'amount' => $amount,
                'cost' => $cost,
            ));
        }
        return $output;
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all unfilled currently open orders
         * @param {string|null} $symbol unified market $symbol
         * @param {int|null} $since the earliest time in ms to fetch open orders for
         * @param {int|null} $limit the maximum number of  open orders structures to retrieve
         * @param {array} $params extra parameters specific to the deepwaters api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $paramsWithFilters = array_merge($params, array( 'status-in' => 'ACTIVE-PARTIALLY_FILLED' ));
        // array(
        //     {
        //       "averagePrice" => "string",
        //       "baseAssetID" => "string",
        //       "createdAtMicros" => 0,
        //       "customerObjectID" => "string",
        //       "durationType" => "GOOD_TILL_CANCEL",
        //       "expiresAtMicros" => 0,
        //       "modifiedAtMicros" => 0,
        //       "originalQuantity" => "string",
        //       "price" => "string",
        //       "quantity" => "string",
        //       "quoteAssetID" => "string",
        //       "side" => "BUY",
        //       "status" => "ACTIVE-PARTIALLY_FILLED",
        //       "type" => "LIMIT",
        //       "venueOrderID" => "string",
        //       "volume" => "string"
        //     }
        //   )
        return $this->fetch_orders($symbol, $since, $limit, $paramsWithFilters);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches information on multiple closed orders made by the user
         * @param {string|null} $symbol unified market $symbol of the market orders were made in
         * @param {int|null} $since the earliest time in ms to fetch orders for
         * @param {int|null} $limit the maximum number of  orde structures to retrieve
         * @param {array} $params extra parameters specific to the deepwaters api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $paramsWithFilters = array_merge($params, array( 'status-in' => 'FILLED' ));
        // array(
        //     {
        //       "averagePrice" => "string",
        //       "baseAssetID" => "string",
        //       "createdAtMicros" => 0,
        //       "customerObjectID" => "string",
        //       "durationType" => "GOOD_TILL_CANCEL",
        //       "expiresAtMicros" => 0,
        //       "modifiedAtMicros" => 0,
        //       "originalQuantity" => "string",
        //       "price" => "string",
        //       "quantity" => "string",
        //       "quoteAssetID" => "string",
        //       "side" => "BUY",
        //       "status" => "FILLED",
        //       "type" => "LIMIT",
        //       "venueOrderID" => "string",
        //       "volume" => "string"
        //     }
        //   )
        return $this->fetch_orders($symbol, $since, $limit, $paramsWithFilters);
    }

    public function fetch_canceled_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $paramsWithFilters = array_merge($params, array( 'status-in' => 'CANCELLED' ));
        // array(
        //     {
        //       "averagePrice" => "string",
        //       "baseAssetID" => "string",
        //       "createdAtMicros" => 0,
        //       "customerObjectID" => "string",
        //       "durationType" => "GOOD_TILL_CANCEL",
        //       "expiresAtMicros" => 0,
        //       "modifiedAtMicros" => 0,
        //       "originalQuantity" => "string",
        //       "price" => "string",
        //       "quantity" => "string",
        //       "quoteAssetID" => "string",
        //       "side" => "BUY",
        //       "status" => "CANCELLED",
        //       "type" => "LIMIT",
        //       "venueOrderID" => "string",
        //       "volume" => "string"
        //     }
        //   )
        return $this->fetch_orders($symbol, $since, $limit, $paramsWithFilters);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * create an $order
         * @param {string} $symbol unified $symbol of the $market to create an $order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float|null} $price the $price at which the $order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} $params extra parameters specific to the deepwaters api endpoint
         * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#$order-structure $order structure}
         */
        $this->load_markets();
        $durationType = $this->safe_string($params, 'durationType', 'GOOD_TILL_CANCEL');
        $orderType = strtoupper($type);
        $market = $this->market($symbol);
        $orderSide = strtoupper($side);
        $customerObjectId = $this->safe_string($params, 'customerObjectId');
        $expiresAtMicros = $this->safe_number($params, 'expiresAtMicros', 0);
        $expiresIn = $this->safe_value($params, 'expiresIn', '');
        $precisionQuantity = $this->amount_to_precision($symbol, $amount);
        // {
        //     "baseAssetID" => "string",
        //     "customerObjectID" => "string",
        //     "durationType" => "GOOD_TILL_CANCEL",
        //     "expiresAtMicros" => 0,
        //     "expiresIn" => "string",
        //     "price" => "string",
        //     "quantity" => "string",
        //     "quoteAssetID" => "string",
        //     "side" => "BUY",
        //     "type" => "LIMIT"
        //   }
        $request = array(
            'baseAssetID' => $market['baseId'],
            'durationType' => $durationType,
            'customerObjectID' => $customerObjectId,
            'type' => $orderType,
            'side' => $orderSide,
            'quoteAssetID' => $market['quoteId'],
            'quantity' => $precisionQuantity,
        );
        if ($type === 'limit') {
            $precisionPrice = $this->price_to_precision($symbol, $price);
            $request['price'] = $precisionPrice;
            if ($durationType === 'GOOD_TILL_EXPIRY') {
                $request['expiresIn'] = $expiresIn ? $expiresIn : null;
                $request['expiresAtMicros'] = $expiresAtMicros ? $expiresAtMicros : null;
            }
        }
        $this->load_nonce();
        $response = $this->privatePostOrders ($request);
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        // Market Order
        // {
        //     $status => 'FILLED',
        //     $respondedAtMicros => '1677872186295635',
        //     venueOrderID => '0x85b3e1dd0c9f4609a3b611f991c54c51d85ab510745b11a039af52c0bab46b1a',
        //     originalQuantity => '1.00',
        //     quantity => '0.00'
        // }
        // Limit Order
        $result = $this->safe_value($response, 'result', array());
        $id = $this->safe_value($result, 'venueOrderID');
        $respondedAtMicros = $this->safe_value($result, 'respondedAtMicros');
        $timestamp = $this->parse_number(Precise::string_div($respondedAtMicros, '1000', '0'));
        $datetime = $this->iso8601($timestamp);
        $exchangeStatus = $this->safe_value($result, 'status');
        $status = $this->parse_order_status($exchangeStatus);
        $originalQuantitiy = $this->safe_value($result, 'originalQuantitiy');
        $order = array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'amount' => $originalQuantitiy,
            'info' => $result,
        );
        if ($exchangeStatus === 'FILLED') {
            $order['filled'] = $originalQuantitiy;
        }
        if ($type === 'limit') {
            $order['price'] = $price;
        }
        return $this->safe_order($order);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        // $params and $symbol are unused
        $this->load_markets();
        $this->load_nonce();
        if (gettype($id) !== 'string') {
            throw new ArgumentsRequired($this->id . ' fetchOrder () requires a string id');
        }
        $isVenueId = mb_substr($id, 0, 2 - 0) === '0x';
        $response = null;
        $request = array(
            'id' => $id,
        );
        if ($isVenueId) {
            $response = $this->privateGetOrdersByVenueOrderIdId (array_merge($request, $params));
        } else {
            $response = $this->privateGetOrdersByCustomerObjectIdId (array_merge($request, $params));
        }
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        $result = $this->safe_value($response, 'result', array());
        // {
        //     "averagePrice" => "string",
        //     "baseAssetID" => "string",
        //     "createdAtMicros" => 0,
        //     "customerObjectID" => "string",
        //     "durationType" => "GOOD_TILL_CANCEL",
        //     "expiresAtMicros" => 0,
        //     "modifiedAtMicros" => 0,
        //     "originalQuantity" => "string",
        //     "price" => "string",
        //     "quantity" => "string",
        //     "quoteAssetID" => "string",
        //     "side" => "BUY",
        //     "status" => "ACTIVE",
        //     "type" => "LIMIT",
        //     "venueOrderID" => "string",
        //     "volume" => "string"
        //   }
        return $this->parse_order($result);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        /**
         * cancels an open $order
         * @param {string} $id $order $id
         * @param {string} $symbol unused
         * @param {array} $params unused
         * @return {array} An {@link https://docs.ccxt.com/en/latest/manual.html#$order-structure $order structure}
         */
        $this->load_markets();
        $this->load_nonce();
        $params = array(
            'id' => $id,
        );
        if (gettype($id) !== 'string') {
            throw new ArgumentsRequired($this->id . ' cancelOrder () requires a string id');
        }
        $isVenueId = mb_substr($id, 0, 2 - 0) === '0x';
        $response = null;
        if ($isVenueId) {
            // "results" => array(
            //     {
            //       "customerObjectID" => "string",
            //       "error" => "string",
            //       "respondedAtMicros" => 0,
            //       "status" => "ACTIVE",
            //       "success" => true,
            //       "venueOrderID" => "string"
            //     }
            //   )
            $response = $this->privateDeleteOrdersByVenueOrderIdId ($params);
        } else {
            // "results" => array(
            //     {
            //       "customerObjectID" => "string",
            //       "error" => "string",
            //       "respondedAtMicros" => 0,
            //       "status" => "ACTIVE",
            //       "success" => true,
            //       "venueOrderID" => "string"
            //     }
            //   )
            $response = $this->privateDeleteOrdersByCustomerObjectIdId ($params);
        }
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        // Deepwaters doesn't respond with any $order information on cancelation
        $order = array(
            'status' => 'canceled',
        );
        if ($isVenueId) {
            $order['id'] = $id;
        } else {
            $order['clientOrderId'] = $id;
        }
        return $this->parse_order($order);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        $this->load_markets();
        $this->load_nonce();
        if ($symbol) {
            $market = $this->market($symbol);
            $pairParam = array(
                'pair' => $market->id,
            );
            $params = array_merge($params, $pairParam);
        }
        $response = $this->privateDeleteOrders ($params);
        // EXAMPLE $response
        // {
        //     "result" => array(
        //       "numCancelled" => 0,
        //       "respondedAtMicros" => 0
        //     ),
        //     "success" => true
        //   }
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        return $this->safe_value($response, 'result', array());
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        /**
         * Signs an $api request to deepwaters exchange
         * @see https://rest.docs.api.deepwaters.xyz/cutting_edge/index.html
         */
        // Get array of $params from the $path
        $pathParams = $this->extract_params($path);
        // this is the $path with any variable segments substituted from provided $params
        // currently only relevant for 'pairs/{marketId}/orderbook', which isn't signed
        $path = '/' . $this->implode_params($path, $params);
        // Remove $params which were substituted in $path, required for signing
        $params = $this->omit($params, $pathParams);
        $nonce = '';
        $bodyString = '';
        if ($api === 'private') {
            $headers = array();
            $timestamp = $this->number_to_string($this->microseconds() + 10);
            $this->check_required_credentials();
            if (($method === 'GET') || ($method === 'DELETE')) {
                $keys = is_array($params) ? array_keys($params) : array();
                if (strlen($keys)) {
                    $path = $path . '?' . $this->urlencode($params);
                }
            }
            if (($method === 'POST') || ($method === 'DELETE')) {
                if ($method === 'POST') {
                    $body = $params;
                    $bodyString = json_encode ($body);
                }
                $nonce = $this->number_to_string(array($this, 'nonce'));
                $postDeleteHeaders = array(
                    'content-type' => 'application/json',
                    'X-DW-NONCE' => $nonce,
                );
                $headers = array_merge($headers, $postDeleteHeaders);
            }
            $message = $method . '/rest/v1' . strtolower($path) . $timestamp . $nonce . $bodyString;
            // calculate $signature
            $signature = $this->sign_hash($this->hash($message, 'keccak'), $this->secret);
            $signature->v = $signature->v - 27;
            $vByte = $signature->v.toString (16);
            if (strlen($vByte) === 1) {
                $vByte = '0' . $vByte;
            }
            $signatureString = $signature->r . mb_substr($signature->s, 2) . $vByte;
            $sigHeaders = array(
                'X-DW-APIKEY' => $this->$'apiKey',
                'X-DW-TSUS' => $timestamp,
                'X-DW-SIGHEX' => $signatureString,
            );
            $headers = array_merge($headers, $sigHeaders);
        }
        $url = $this->urls['api'][$api] . $path;
        if (strlen($bodyString)) {
            return array( 'url' => $url, 'method' => $method, 'body' => $bodyString, 'headers' => $headers );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function load_nonce() {
        // $nonce is needed for signing transactions but since the sign method
        // is not async, the #loadNonce method should be called
        // by methods who must be signed with $nonce beforehand
        $response = $this->privateGetCustomerApiKeyStatus ();
        // "result" => array(
        //     "APIKey" => "string",
        //     "createdAtMicros" => 0,
        //     "expiresAtMicros" => 0,
        //     "label" => "string",
        //     "modifiedAtMicros" => 0,
        //     "nonce" => 0,
        //     "status" => "string"
        //   ),
        $success = $this->safe_value($response, 'success', false);
        if (!$success) {
            return $this->handle_error($response);
        }
        $result = $this->safe_value($response, 'result', array());
        $nonce = $this->safe_string($result, 'nonce');
        if (!$nonce) {
            throw new InvalidNonce('Nonce could not be found');
        }
        array($this, 'nonce')= $this->parse_number($nonce);
    }

    public function handle_error($response = array ()) {
        $error = $this->safe_string($response, 'error', '');
        $code = $this->safe_string($response, 'code', '');
        $status = $this->safe_string($response, 'status', '');
        throw new ExchangeError($code . ' => ' . $error . ' ' . $status);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'ACTIVE' => 'open',
            'FILLED' => 'closed',
            'PARTIALLY_FILLED' => 'open',
            'REJECTED' => 'rejected',
            'CANCELLED' => 'canceled',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, null);
    }

    public function parse_order($order, $market = null) {
        // {
        //     venueOrderID => '0x1a5f344dcfeae6fbf1949b3f79139e0618ca95964d7512d3e0cc4d0569b4aab8',
        //     $type => 'LIMIT',
        //     $side => 'SELL',
        //     $status => 'FILLED',
        //     originalQuantity => '1.00',
        //     quantity => '0.00',
        //     $baseAssetID => 'WAVAX.AVALANCHE_FUJI.43113.TESTNET.PROD',
        //     $quoteAssetID => 'USDC.AVALANCHE_FUJI.43113.TESTNET.PROD',
        //     $price => '16.5',
        //     averagePrice => '16.529',
        //     volume => '16.529',
        //     durationType => 'GOOD_TILL_CANCEL',
        //     $createdAtMicros => '1677875410433286',
        //     $modifiedAtMicros => '1677875410452713'
        // }
        $id = $this->safe_value($order, 'venueOrderID');
        $type = $this->safe_string_lower($order, 'type');
        $side = $this->safe_string_lower($order, 'side');
        $exchangeStatus = $this->safe_value($order, 'status');
        $status = $this->parse_order_status($exchangeStatus);
        $createdAtMicros = $this->safe_value($order, 'createdAtMicros');
        $timestamp = $this->parse_number(Precise::string_div($createdAtMicros, '1000', '0'));
        $datetime = $this->iso8601($timestamp);
        $modifiedAtMicros = $this->safe_value($order, 'modifiedAtMicros');
        $lastTradeTimestamp = $this->parse_number(Precise::string_div($modifiedAtMicros, '1000', '0'));
        $baseAssetID = $this->safe_value($order, 'baseAssetID');
        $quoteAssetID = $this->safe_value($order, 'quoteAssetID');
        $market = $market ? $market : $this->market($baseAssetID . '-' . $quoteAssetID);
        $symbol = $this->safe_value($market, 'symbol');
        $price = $this->safe_number($order, 'price');
        $average = $this->safe_number($order, 'averagePrice');
        $amount = $this->safe_number($order, 'originalQuantity');
        $filled = Precise::string_sub($this->safe_value($order, 'originalQuantity'), $this->safe_value($order, 'quantity'));
        $remaining = Precise::string_sub($this->safe_value($order, 'originalQuantity'), $filled);
        $cost = Precise::string_mul($this->safe_value($order, 'price'), $filled);
        $output = array(
            'id' => $id,
            'status' => $status,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'cost' => $cost,
            'info' => $order,
        );
        return $this->safe_order($output);
    }
}
